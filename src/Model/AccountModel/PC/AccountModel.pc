
#include<string.h>
#include</opt/oracle/clinet64/instantclient_19_5/sdk/include/sqlca.h>
#include<iostream>
using namespace std;

#include "../Include/AccountModel.h"


int Bank::addCustomerAccount(Customer &p_Custobj,Account &p_Accobj)
 {
    
    AccountUI UIobj;

    
    EXEC SQL BEGIN DECLARE SECTION;
    long int h_CustID; 
    long int p_CustID;
    char h_Acctype[11];

      
    //const char h_savings[11]={'s','a','v','i','n','g','s',' ',' ',' '};
    //const char h_current[11]={'c','u','r','r','e','n','t',' ',' ',' '};
    //const char h_fixdeposit[11]={'f','i','x','e','d',' ',' ',' ',' ',' '};
    //char h_locker[11]={'l','o','c','k','e','r'};
    double h_AccBalance;
    

    EXEC SQL END DECLARE SECTION;
  
     h_CustID= p_Custobj.m_getCustomerId();


   int l_idstatus=findCustomerID(h_CustID);
   if(l_idstatus==0)
     return 0;
   //    h_CustID= p_Custobj.m_getCustomerId();
  
    //strcpy(h_Acctype,p_Accobj.m_getAccountType().c_str());
   //  h_AccBalance=p_Accobj.m_getAccountBalance();
     
   int mchoice=UIobj.displayAccountTypeMenu();

    if(mchoice==1)
    {
      int schoice=UIobj.displaySavingsMenu();

     if(schoice==1)
     {  
      EXEC SQL BEGIN DECLARE SECTION;
       double h_minbalance;
       double h_balance;
      EXEC SQL END DECLARE SECTION;

       double minbalance=UIobj.getSalariedBalance();
       double balance=UIobj.getBalance();
       h_balance=balance;
       h_minbalance=minbalance;
       EXEC SQL INSERT INTO salariedAccount values(accountno.nextval,:h_minbalance,4.5);
       cout<<"\n Inserted into salaried Account";
       EXEC SQL INSERT INTO account values(accountno.currval,'savings',h_balance,:h_CustID);
       cout<<"Inserted Successfully into account";
     }

     else if(schoice==2)
     {
       EXEC SQL BEGIN DECLARE SECTION;
        double h_minbalance;
        double h_balance; 
       EXEC SQL END DECLARE SECTION;

        double minbalance=UIobj.getNonSalBalance();
        double balance=UIobj.getBalance();
        h_balance=balance;
        h_minbalance=minbalance;
        EXEC SQL INSERT INTO NonsalariedAccount values(accountno.nextval,:h_minbalance,4.5);
        cout<<"Inserted into Nonsalaried Account";
        EXEC SQL INSERT INTO account values(accountno.currval,'savings',:h_balance,:h_CustID);
        cout<<"Inserted Successfully into account";
     }
  }
   else if(mchoice==2)
   {
      EXEC SQL BEGIN DECLARE SECTION;
       double h_balance;
      EXEC SQL END DECLARE SECTION;

     double balance=UIobj.getBalance();
     h_balance=balance;
     cout<<"\n Inserted into Current Account";
     EXEC SQL INSERT INTO account values(accountno.currval,'Current',:h_balance,:h_CustID);
     cout<<"Inserted into Account";
   }
  
  else if(mchoice==3)
  {
    EXEC SQL BEGIN DECLARE SECTION;
     double h_depositAmount;
     int  h_depositYears;
     double h_maturityInterest;
     double h_maturityAmount;
     double h_rate;
    EXEC SQL END DECLARE SECTION;
 
     double depositAmount=UIobj.getDepositAmount();
     int depositYears=UIobj.getDepositYears();
    // double depositInterest=UIobj.getDepositInterest();

    
     h_depositAmount= depositAmount;
     h_depositYears=depositYears;
     //h_depositInterest=depositInterest;

     EXEC SQL SELECT rate INTO :h_rate FROM rate WHERE time=:h_depositYears;

     h_maturityInterest=h_depositAmount*h_rate;
     h_maturityAmount=h_depositAmount+h_maturityInterest;
     
          
     EXEC SQL INSERT INTO fixedaccount values(accountno.nextval,:h_depositAmount,:h_depositYears,:h_maturityAmount,sysdate);
     cout<<"\n Inserted into FixedDepositAccount";
     EXEC SQL INSERT INTO account values(accountno.currval,'FixedDeposit',:h_depositAmount,:h_CustID);
     cout<<"Inserted into Account";
 }

 else{
      cout<<"\n Error";
     }        


   if(sqlca.sqlcode==0)
    {
      EXEC SQL COMMIT;
      return 1;
    }                                          
    else
      return 0;
  
}




int Bank::dbcloseAccount(long int p_accountno)
{
   EXEC SQL BEGIN DECLARE SECTION;
      long int h_accountno;
   EXEC SQL END DECLARE SECTION;
       h_accountno=p_accountno;
       int l_idstatus=findAccountNo(h_accountno);
      if(l_idstatus==0)
         return 0;
     
     EXEC SQL UPDATE account SET status='inactive' WHERE accountno=:h_accountno;
      cout<<"\n Updated Successfully";
if(sqlca.sqlcode==0)
{
    EXEC SQL COMMIT;
     return 1;
  } else
     return 0;
}




    
void Bank::dbConnect()
{
EXEC SQL BEGIN DECLARE SECTION;
char h_hostName[14]="BMS@XE";
char h_password[8]="abc123";

EXEC SQL END DECLARE SECTION;

EXEC SQL CONNECT :h_hostName IDENTIFIED BY :h_password;




}

void Bank::disconnect()
{
EXEC SQL COMMIT WORK RELEASE;


}

int Bank::findCustomerID(long int p_CustID)
{
   
        EXEC SQL BEGIN DECLARE SECTION;
        // char l_Custname[30];
       // char l_Custname[30];
        long int l_tempCustId=0;
        EXEC SQL END DECLARE SECTION;
        EXEC SQL SELECT customerID INTO :l_tempCustId FROM customer WHERE customerID= :p_CustID;
         if(l_tempCustId==0 )
            return 0;
          else
             return 1;
}


int Bank::findAccountNo(long int p_accountno)
{
   
        EXEC SQL BEGIN DECLARE SECTION;
        long int l_tempaccountno=0;
        long int h_tempaccountno=p_accountno;
        EXEC SQL END DECLARE SECTION;
        EXEC SQL SELECT accountno INTO :l_tempaccountno FROM account WHERE accountno=:h_tempaccountno;
         if(l_tempaccountno==0 )
            return 0;
          else
             return 1;
}



int Bank::accountStatementGeneration( long int p_accountno)
{
 EXEC SQL BEGIN DECLARE SECTION;
long int h_accountno;
long int h_transactionID;
char h_transactiondate[20];
char h_type[10];
double h_amount;
EXEC SQL END DECLARE SECTION;
h_accountno=p_accountno;
EXEC SQL DECLARE C1 CURSOR FOR SELECT transactionID , accountno,to_char(transactiondate,'dd-mm-yyyy'),type,amount FROM transaction WHERE aacountno=:h_accountno;
   EXEC SQL OPEN C1;
   EXEC SQL WHENEVER NOT FOUND DO BREAK;
   for (;;)
    {
      EXEC SQL FETCH C1
      INTO :h_transactionID , :h_accountno,:h_transactiondate,:h_type,:h_amount;
      AccountUI l_accUI;
      
      int l_status=l_accUI.displayTransaction(h_transactionID,h_accountno,h_transactiondate,h_type,h_amount);
      return l_status;
    }
return 0;

}
